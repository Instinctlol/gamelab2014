/*
-----------------------------------------------------------------------------
Filename:    OgreBulletStereo.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC9 (August 2010)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef __OgreBulletStereo_h_
#define __OgreBulletStereo_h_

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif
#include <ShlObj.h>
#include <OgreTimer.h>
// base app
#include "BaseApplication.h"

// default viargo navigation
#include "DefaultCameraMetaphor.h"

#include <deque>

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
class OgreBulletStereo : public BaseApplication {
public:
	// ctor
    OgreBulletStereo();

	// dtor
    virtual ~OgreBulletStereo();

protected:
	// creates and sets the initial scene
    virtual void createScene();

	// creates and sets the camera
    virtual void createCamera();

	// per-frame updates
	virtual bool frameStarted(const Ogre::FrameEvent& evt);
    virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);
	virtual bool frameEnded(const Ogre::FrameEvent& evt);
	virtual bool keyPressed( const OIS::KeyEvent &arg );
	virtual bool keyReleased( const OIS::KeyEvent &arg );

	virtual void chooseSceneManager();
	virtual void createViewerScreen(bool isLeft);
	virtual void createViewports();
	virtual Ogre::RenderTexture* createRenderTexture(bool isLeft);
	
	Ogre::SceneManager* mViewerSceneMgr;
	Ogre::Camera*		mViewerCamera;
	Ogre::RenderTexture* mRenderTextureLeft;
	Ogre::RenderTexture* mRenderTextureRight;
	


	StereoRenderTargetListener* _stereoListener;

	StereoRenderTargetListener::StereoMode _stereoMode;
	
};

#endif // #ifndef __OgreBulletStereo_h_
