<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Game</name>
    </assembly>
    <members>
        <member name="T:Game.AboutWindow">
            <summary>
            Defines a about us window.
            </summary>
        </member>
        <member name="T:Game.ActionGameWindow">
            <summary>
            Defines a game window for FPS and TPS games.
            </summary>
        </member>
        <member name="T:Game.GameWindow">
            <summary>
            Defines a base window of game.
            </summary>
        </member>
        <member name="M:Game.ActionGameWindow.UpdateCurrentPlayerUseObjects">
            <summary>
            Updates objects on which the player can to operate.
            Such as which the player can supervise switches, ingameGUI or control units.
            </summary>
        </member>
        <member name="M:Game.ActionGameWindow.UpdateHUD">
            <summary>
            Updates HUD screen
            </summary>
        </member>
        <member name="M:Game.ActionGameWindow.DrawTarget(Engine.Renderer.GuiRenderer)">
            <summary>
            Draw a target at center of screen
            </summary>
            <param name="renderer"></param>
        </member>
        <member name="M:Game.ActionGameWindow.DrawPlayerInformation(Engine.Renderer.GuiRenderer)">
            <summary>
            To draw some information of a player
            </summary>
            <param name="renderer"></param>
        </member>
        <member name="M:Game.ActionGameWindow.GetActiveObserveCameraArea">
            <summary>
            Finds observe area in which there is a player.
            </summary>
            <returns><b>ObserveCameraArea</b>if the player is in area; otherwise <b>null</b>.</returns>
        </member>
        <member name="M:Game.ActionGameWindow.GetNearestPointToMapCurve(Engine.MathEx.Vec3,Engine.MapSystem.MapCurve)">
            <summary>
            Finds the nearest point to a map curve.
            </summary>
            <param name="destPos">The point to which is searched the nearest.</param>
            <param name="mapCurve">The map curve.</param>
            <returns>The nearest point to a map curve.</returns>
        </member>
        <member name="M:Game.ActionGameWindow.GetActiveObserveCameraAreaCameraOrientation(Engine.MathEx.Vec3@,Engine.MathEx.Vec3@,Engine.MathEx.Vec3@,Engine.MathEx.Degree@)">
            <summary>
            Receives orientation of the camera in the observe area of in which there is a player.
            </summary>
            <param name="position">The camera position.</param>
            <param name="forward">The forward vector.</param>
            <param name="up">The up vector.</param>
            <param name="cameraFov">The camera FOV.</param>
            <returns><b>true</b>if the player is in any area; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Game.AlienGameWindow.GetColor(ProjectEntities.Unit)">
            <summary>
            Farbe f√ºr kleine Aliens und Spawnpoint verschieden
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Game.AlienGameWindow.ClearEntitySelection">
            <summary>
            removes all small aliens from selectedUnits
            </summary>
        </member>
        <member name="M:Game.AlienGameWindow.SetEntitySelected(ProjectEntities.Unit,System.Boolean)">
            <summary>
            Adds or removes a small alien from selectedUnits
            </summary>
            <param name="entity"></param>
            <param name="selected"></param>
        </member>
        <member name="M:Game.AlienGameWindow.GetMapPositionByMouseOnMinimap">
            <summary>
            Changes Map position by calculating the position from the position of the mouse on the minimap
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSC.NET.OSCBundle">
            <summary>
            OSCBundle
            </summary>
        </member>
        <member name="T:OSC.NET.OSCPacket">
            <summary>
            OSCPacket
            </summary>
        </member>
        <member name="T:OSC.NET.OSCMessage">
            <summary>
            OSCMessage
            </summary>
        </member>
        <member name="T:OSC.NET.OSCReceiver">
            <summary>
            OSCReceiver
            </summary>
        </member>
        <member name="T:OSC.NET.OSCTransmitter">
            <summary>
            OSCTransmitter
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TUIO.TuioClient" -->
        <member name="M:TUIO.TuioClient.#ctor">
            The default constructor creates a client that listens to the default TUIO port 3333
        </member>
        <member name="M:TUIO.TuioClient.#ctor(System.Int32)">
             This constructor creates a client that listens to the provided port
            
             @param port the listening port number
        </member>
        <member name="M:TUIO.TuioClient.getPort">
             Returns the port number listening to.
            
             @return the listening port number
        </member>
        <member name="M:TUIO.TuioClient.connect">
            The TuioClient starts listening to TUIO messages on the configured UDP port
            All reveived TUIO messages are decoded and the resulting TUIO events are broadcasted to all registered TuioListeners
        </member>
        <member name="M:TUIO.TuioClient.disconnect">
            The TuioClient stops listening to TUIO messages on the configured UDP port
        </member>
        <member name="M:TUIO.TuioClient.isConnected">
            Returns true if this TuioClient is currently connected.
            @return	true if this TuioClient is currently connected
        </member>
        <member name="M:TUIO.TuioClient.processMessage(OSC.NET.OSCMessage)">
             The OSC callback method where all TUIO messages are received and decoded
             and where the TUIO event callbacks are dispatched
            
             @param message	the received OSC message
        </member>
        <member name="M:TUIO.TuioClient.addTuioListener(TUIO.TuioListener)">
             Adds the provided TuioListener to the list of registered TUIO event listeners
            
             @param listener the TuioListener to add
        </member>
        <member name="M:TUIO.TuioClient.removeTuioListener(TUIO.TuioListener)">
             Removes the provided TuioListener from the list of registered TUIO event listeners
            
             @param listener the TuioListener to remove
        </member>
        <member name="M:TUIO.TuioClient.removeAllTuioListeners">
            Removes all TuioListener from the list of registered TUIO event listeners
        </member>
        <member name="M:TUIO.TuioClient.getTuioObjects">
             Returns a Vector of all currently active TuioObjects
            
             @return a Vector of all currently active TuioObjects
        </member>
        <member name="M:TUIO.TuioClient.getTuioCursors">
             Returns a Vector of all currently active TuioCursors
            
             @return a Vector of all currently active TuioCursors
        </member>
        <member name="M:TUIO.TuioClient.getTuioObject(System.Int64)">
             Returns the TuioObject corresponding to the provided Session ID
             or NULL if the Session ID does not refer to an active TuioObject
            
             @return an active TuioObject corresponding to the provided Session ID or NULL
        </member>
        <member name="M:TUIO.TuioClient.getTuioCursor(System.Int64)">
             Returns the TuioCursor corresponding to the provided Session ID
             or NULL if the Session ID does not refer to an active TuioCursor
            
             @return an active TuioCursor corresponding to the provided Session ID or NULL
        </member>
        <member name="T:TUIO.TuioContainer">
             The abstract TuioContainer class defines common attributes that apply to both subclasses {@link TuioObject} and {@link TuioCursor}.
            
             @author Martin Kaltenbrunner
             @version 1.4
        </member>
        <member name="T:TUIO.TuioPoint">
             The TuioPoint class on the one hand is a simple container and utility class to handle TUIO positions in general,
             on the other hand the TuioPoint is the base class for the TuioCursor and TuioObject classes.
            
             @author Martin Kaltenbrunner
             @version 1.4
        </member>
        <member name="F:TUIO.TuioPoint.xpos">
            X coordinate, representated as a floating point value in a range of 0..1
        </member>
        <member name="F:TUIO.TuioPoint.ypos">
            Y coordinate, representated as a floating point value in a range of 0..1
        </member>
        <member name="F:TUIO.TuioPoint.currentTime">
            The time stamp of the last update represented as TuioTime (time since session start)
        </member>
        <member name="F:TUIO.TuioPoint.startTime">
            The creation time of this TuioPoint represented as TuioTime (time since session start)
        </member>
        <member name="M:TUIO.TuioPoint.#ctor">
            The default constructor takes no arguments and sets
            its coordinate attributes to zero and its time stamp to the current session time.
        </member>
        <member name="M:TUIO.TuioPoint.#ctor(System.Single,System.Single)">
             This constructor takes two floating point coordinate arguments and sets
             its coordinate attributes to these values and its time stamp to the current session time.
            
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioPoint.#ctor(TUIO.TuioPoint)">
             This constructor takes a TuioPoint argument and sets its coordinate attributes
             to the coordinates of the provided TuioPoint and its time stamp to the current session time.
            
             @param	tpoint	the TuioPoint to assign
        </member>
        <member name="M:TUIO.TuioPoint.#ctor(TUIO.TuioTime,System.Single,System.Single)">
             This constructor takes a TuioTime object and two floating point coordinate arguments and sets
             its coordinate attributes to these values and its time stamp to the provided TUIO time object.
            
             @param	ttime	the TuioTime to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioPoint.update(TUIO.TuioPoint)">
             Takes a TuioPoint argument and updates its coordinate attributes
             to the coordinates of the provided TuioPoint and leaves its time stamp unchanged.
            
             @param	tpoint	the TuioPoint to assign
        </member>
        <member name="M:TUIO.TuioPoint.update(System.Single,System.Single)">
             Takes two floating point coordinate arguments and updates its coordinate attributes
             to the coordinates of the provided TuioPoint and leaves its time stamp unchanged.
            
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioPoint.update(TUIO.TuioTime,System.Single,System.Single)">
             Takes a TuioTime object and two floating point coordinate arguments and updates its coordinate attributes
             to the coordinates of the provided TuioPoint and its time stamp to the provided TUIO time object.
            
             @param	ttime	the TuioTime to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioPoint.getX">
            Returns the X coordinate of this TuioPoint.
            @return	the X coordinate of this TuioPoint
        </member>
        <member name="M:TUIO.TuioPoint.getY">
            Returns the Y coordinate of this TuioPoint.
            @return	the Y coordinate of this TuioPoint
        </member>
        <member name="M:TUIO.TuioPoint.getDistance(System.Single,System.Single)">
             Returns the distance to the provided coordinates
            
             @param	xp	the X coordinate of the distant point
             @param	yp	the Y coordinate of the distant point
             @return	the distance to the provided coordinates
        </member>
        <member name="M:TUIO.TuioPoint.getDistance(TUIO.TuioPoint)">
             Returns the distance to the provided TuioPoint
            
             @param	tpoint	the distant TuioPoint
             @return	the distance to the provided TuioPoint
        </member>
        <member name="M:TUIO.TuioPoint.getAngle(System.Single,System.Single)">
             Returns the angle to the provided coordinates
            
             @param	xp	the X coordinate of the distant point
             @param	yp	the Y coordinate of the distant point
             @return	the angle to the provided coordinates
        </member>
        <member name="M:TUIO.TuioPoint.getAngle(TUIO.TuioPoint)">
             Returns the angle to the provided TuioPoint
            
             @param	tpoint	the distant TuioPoint
             @return	the angle to the provided TuioPoint
        </member>
        <member name="M:TUIO.TuioPoint.getAngleDegrees(System.Single,System.Single)">
             Returns the angle in degrees to the provided coordinates
            
             @param	xp	the X coordinate of the distant point
             @param	yp	the Y coordinate of the distant point
             @return	the angle in degrees to the provided TuioPoint
        </member>
        <member name="M:TUIO.TuioPoint.getAngleDegrees(TUIO.TuioPoint)">
             Returns the angle in degrees to the provided TuioPoint
            
             @param	tpoint	the distant TuioPoint
             @return	the angle in degrees to the provided TuioPoint
        </member>
        <member name="M:TUIO.TuioPoint.getScreenX(System.Int32)">
             Returns the X coordinate in pixels relative to the provided screen width.
            
             @param	width	the screen width
             @return	the X coordinate of this TuioPoint in pixels relative to the provided screen width
        </member>
        <member name="M:TUIO.TuioPoint.getScreenY(System.Int32)">
             Returns the Y coordinate in pixels relative to the provided screen height.
            
             @param	height	the screen height
             @return	the Y coordinate of this TuioPoint in pixels relative to the provided screen height
        </member>
        <member name="M:TUIO.TuioPoint.getTuioTime">
             Returns the time stamp of this TuioPoint as TuioTime.
            
             @return	the time stamp of this TuioPoint as TuioTime
        </member>
        <member name="M:TUIO.TuioPoint.getStartTime">
             Returns the start time of this TuioPoint as TuioTime.
            
             @return	the start time of this TuioPoint as TuioTime
        </member>
        <member name="F:TUIO.TuioContainer.TUIO_ADDED">
            Defines the ADDED state.
        </member>
        <member name="F:TUIO.TuioContainer.TUIO_ACCELERATING">
            Defines the ACCELERATING state.
        </member>
        <member name="F:TUIO.TuioContainer.TUIO_DECELERATING">
            Defines the DECELERATING state.
        </member>
        <member name="F:TUIO.TuioContainer.TUIO_STOPPED">
            Defines the STOPPED state.
        </member>
        <member name="F:TUIO.TuioContainer.TUIO_REMOVED">
            Defines the REMOVED state.
        </member>
        <member name="F:TUIO.TuioContainer.session_id">
            The unique session ID number that is assigned to each TUIO object or cursor.
        </member>
        <member name="F:TUIO.TuioContainer.x_speed">
            The X-axis velocity value.
        </member>
        <member name="F:TUIO.TuioContainer.y_speed">
            The Y-axis velocity value.
        </member>
        <member name="F:TUIO.TuioContainer.motion_speed">
            The motion speed value.
        </member>
        <member name="F:TUIO.TuioContainer.motion_accel">
            The motion acceleration value.
        </member>
        <member name="F:TUIO.TuioContainer.path">
            A Vector of TuioPoints containing all the previous positions of the TUIO component.
        </member>
        <member name="F:TUIO.TuioContainer.state">
            Reflects the current state of the TuioComponent
        </member>
        <member name="M:TUIO.TuioContainer.#ctor(TUIO.TuioTime,System.Int64,System.Single,System.Single)">
             This constructor takes a TuioTime argument and assigns it along with the provided
             Session ID, X and Y coordinate to the newly created TuioContainer.
            
             @param	ttime	the TuioTime to assign
             @param	si	the Session ID to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioContainer.#ctor(System.Int64,System.Single,System.Single)">
             This constructor takes the provided Session ID, X and Y coordinate
             and assigs these values to the newly created TuioContainer.
            
             @param	si	the Session ID to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioContainer.#ctor(TUIO.TuioContainer)">
             This constructor takes the atttibutes of the provided TuioContainer
             and assigs these values to the newly created TuioContainer.
            
             @param	tcon	the TuioContainer to assign
        </member>
        <member name="M:TUIO.TuioContainer.update(TUIO.TuioTime,System.Single,System.Single)">
             Takes a TuioTime argument and assigns it along with the provided
             X and Y coordinate to the private TuioContainer attributes.
             The speed and accleration values are calculated accordingly.
            
             @param	ttime	the TuioTime to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioContainer.stop(TUIO.TuioTime)">
            This method is used to calculate the speed and acceleration values of
            TuioContainers with unchanged positions.
        </member>
        <member name="M:TUIO.TuioContainer.update(TUIO.TuioTime,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Takes a TuioTime argument and assigns it along with the provided
             X and Y coordinate, X and Y velocity and acceleration
             to the private TuioContainer attributes.
            
             @param	ttime	the TuioTime to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
             @param	xs	the X velocity to assign
             @param	ys	the Y velocity to assign
             @param	ma	the acceleration to assign
        </member>
        <member name="M:TUIO.TuioContainer.update(System.Single,System.Single,System.Single,System.Single,System.Single)">
             Assigns the provided X and Y coordinate, X and Y velocity and acceleration
             to the private TuioContainer attributes. The TuioTime time stamp remains unchanged.
            
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
             @param	xs	the X velocity to assign
             @param	ys	the Y velocity to assign
             @param	ma	the acceleration to assign
        </member>
        <member name="M:TUIO.TuioContainer.update(TUIO.TuioContainer)">
             Takes the atttibutes of the provided TuioContainer
             and assigs these values to this TuioContainer.
             The TuioTime time stamp of this TuioContainer remains unchanged.
            
             @param	tcon	the TuioContainer to assign
        </member>
        <member name="M:TUIO.TuioContainer.remove(TUIO.TuioTime)">
             Assigns the REMOVE state to this TuioContainer and sets
             its TuioTime time stamp to the provided TuioTime argument.
            
             @param	ttime	the TuioTime to assign
        </member>
        <member name="M:TUIO.TuioContainer.getSessionID">
            Returns the Session ID of this TuioContainer.
            @return	the Session ID of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.getXSpeed">
            Returns the X velocity of this TuioContainer.
            @return	the X velocity of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.getYSpeed">
            Returns the Y velocity of this TuioContainer.
            @return	the Y velocity of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.getPosition">
            Returns the position of this TuioContainer.
            @return	the position of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.getPath">
            Returns the path of this TuioContainer.
            @return	the path of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.getMotionSpeed">
            Returns the motion speed of this TuioContainer.
            @return	the motion speed of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.getMotionAccel">
            Returns the motion acceleration of this TuioContainer.
            @return	the motion acceleration of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.getTuioState">
            Returns the TUIO state of this TuioContainer.
            @return	the TUIO state of this TuioContainer
        </member>
        <member name="M:TUIO.TuioContainer.isMoving">
            Returns true of this TuioContainer is moving.
            @return	true of this TuioContainer is moving
        </member>
        <member name="T:TUIO.TuioCursor">
             The TuioCursor class encapsulates /tuio/2Dcur TUIO cursors.
            
             @author Martin Kaltenbrunner
             @version 1.4
        </member>
        <member name="F:TUIO.TuioCursor.cursor_id">
            The individual cursor ID number that is assigned to each TuioCursor.
        </member>
        <member name="M:TUIO.TuioCursor.#ctor(TUIO.TuioTime,System.Int64,System.Int32,System.Single,System.Single)">
             This constructor takes a TuioTime argument and assigns it along with the provided
             Session ID, Cursor ID, X and Y coordinate to the newly created TuioCursor.
            
             @param	ttime	the TuioTime to assign
             @param	si	the Session ID to assign
             @param	ci	the Cursor ID to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioCursor.#ctor(System.Int64,System.Int32,System.Single,System.Single)">
             This constructor takes the provided Session ID, Cursor ID, X and Y coordinate
             and assigs these values to the newly created TuioCursor.
            
             @param	si	the Session ID to assign
             @param	ci	the Cursor ID to assign
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
        </member>
        <member name="M:TUIO.TuioCursor.#ctor(TUIO.TuioCursor)">
             This constructor takes the atttibutes of the provided TuioCursor
             and assigs these values to the newly created TuioCursor.
            
             @param	tcur	the TuioCursor to assign
        </member>
        <member name="M:TUIO.TuioCursor.getCursorID">
            Returns the Cursor ID of this TuioCursor.
            @return	the Cursor ID of this TuioCursor
        </member>
        <!-- Badly formed XML comment ignored for member "T:TUIO.TuioListener" -->
        <member name="M:TUIO.TuioListener.addTuioObject(TUIO.TuioObject)">
             This callback method is invoked by the TuioClient when a new TuioObject is added to the session.
            
             @param  tobj  the TuioObject reference associated to the addTuioObject event
        </member>
        <member name="M:TUIO.TuioListener.updateTuioObject(TUIO.TuioObject)">
             This callback method is invoked by the TuioClient when an existing TuioObject is updated during the session.
            
             @param  tobj  the TuioObject reference associated to the updateTuioObject event
        </member>
        <member name="M:TUIO.TuioListener.removeTuioObject(TUIO.TuioObject)">
             This callback method is invoked by the TuioClient when an existing TuioObject is removed from the session.
            
             @param  tobj  the TuioObject reference associated to the removeTuioObject event
        </member>
        <member name="M:TUIO.TuioListener.addTuioCursor(TUIO.TuioCursor)">
             This callback method is invoked by the TuioClient when a new TuioCursor is added to the session.
            
             @param  tcur  the TuioCursor reference associated to the addTuioCursor event
        </member>
        <member name="M:TUIO.TuioListener.updateTuioCursor(TUIO.TuioCursor)">
             This callback method is invoked by the TuioClient when an existing TuioCursor is updated during the session.
            
             @param  tcur  the TuioCursor reference associated to the updateTuioCursor event
        </member>
        <member name="M:TUIO.TuioListener.removeTuioCursor(TUIO.TuioCursor)">
             This callback method is invoked by the TuioClient when an existing TuioCursor is removed from the session.
            
             @param  tcur  the TuioCursor reference associated to the removeTuioCursor event
        </member>
        <member name="M:TUIO.TuioListener.refresh(TUIO.TuioTime)">
             This callback method is invoked by the TuioClient to mark the end of a received TUIO message bundle.
            
             @param  ftime  the TuioTime associated to the current TUIO message bundle
        </member>
        <member name="T:TUIO.TuioObject">
             The TuioObject class encapsulates /tuio/2Dobj TUIO objects.
            
             @author Martin Kaltenbrunner
             @version 1.4
        </member>
        <member name="F:TUIO.TuioObject.symbol_id">
            The individual symbol ID number that is assigned to each TuioObject.
        </member>
        <member name="F:TUIO.TuioObject.angle">
            The rotation angle value.
        </member>
        <member name="F:TUIO.TuioObject.rotation_speed">
            The rotation speed value.
        </member>
        <member name="F:TUIO.TuioObject.rotation_accel">
            The rotation acceleration value.
        </member>
        <member name="F:TUIO.TuioObject.TUIO_ROTATING">
            Defines the ROTATING state.
        </member>
        <member name="M:TUIO.TuioObject.#ctor(TUIO.TuioTime,System.Int64,System.Int32,System.Single,System.Single,System.Single)">
            	 * This constructor takes a TuioTime argument and assigns it along with the provided
             	 * Session ID, Symbol ID, X and Y coordinate and angle to the newly created TuioObject.
            	 *
            	 * @param	ttime	the TuioTime to assign
            	 * @param	si	the Session ID to assign
            	 * @param	sym	the Symbol ID to assign
            	 * @param	xp	the X coordinate to assign
            	 * @param	yp	the Y coordinate to assign
            	 * @param	a	the angle to assign
        </member>
        <member name="M:TUIO.TuioObject.#ctor(System.Int64,System.Int32,System.Single,System.Single,System.Single)">
            	 * This constructor takes the provided Session ID, Symbol ID, X and Y coordinate
             	 * and angle, and assigs these values to the newly created TuioObject.
            	 *
            	 * @param	si	the Session ID to assign
            	 * @param	sym	the Symbol ID to assign
            	 * @param	xp	the X coordinate to assign
            	 * @param	yp	the Y coordinate to assign
            	 * @param	a	the angle to assign
        </member>
        <member name="M:TUIO.TuioObject.#ctor(TUIO.TuioObject)">
            	 * This constructor takes the atttibutes of the provided TuioObject
             	 * and assigs these values to the newly created TuioObject.
            	 *
            	 * @param	tobj	the TuioObject to assign
        </member>
        <member name="M:TUIO.TuioObject.update(TUIO.TuioTime,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            	 * Takes a TuioTime argument and assigns it along with the provided
             	 * X and Y coordinate, angle, X and Y velocity, motion acceleration,
            	 * rotation speed and rotation acceleration to the private TuioObject attributes.
            	 *
            	 * @param	ttime	the TuioTime to assign
            	 * @param	xp	the X coordinate to assign
            	 * @param	yp	the Y coordinate to assign
            	 * @param	a	the angle coordinate to assign
            	 * @param	xs	the X velocity to assign
            	 * @param	ys	the Y velocity to assign
            	 * @param	rs	the rotation velocity to assign
            	 * @param	ma	the motion acceleration to assign
            	 * @param	ra	the rotation acceleration to assign
        </member>
        <member name="M:TUIO.TuioObject.update(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Assigns the provided X and Y coordinate, angle, X and Y velocity, motion acceleration
             rotation velocity and rotation acceleration to the private TuioContainer attributes.
             The TuioTime time stamp remains unchanged.
            
             @param	xp	the X coordinate to assign
             @param	yp	the Y coordinate to assign
             @param	a	the angle coordinate to assign
             @param	xs	the X velocity to assign
             @param	ys	the Y velocity to assign
             @param	rs	the rotation velocity to assign
             @param	ma	the motion acceleration to assign
             @param	ra	the rotation acceleration to assign
        </member>
        <member name="M:TUIO.TuioObject.update(TUIO.TuioTime,System.Single,System.Single,System.Single)">
            	 * Takes a TuioTime argument and assigns it along with the provided
             	 * X and Y coordinate and angle to the private TuioObject attributes.
            	 * The speed and accleration values are calculated accordingly.
            	 *
            	 * @param	ttime	the TuioTime to assign
            	 * @param	xp	the X coordinate to assign
            	 * @param	yp	the Y coordinate to assign
            	 * @param	a	the angle coordinate to assign
        </member>
        <member name="M:TUIO.TuioObject.update(TUIO.TuioObject)">
            	 * Takes the atttibutes of the provided TuioObject
             	 * and assigs these values to this TuioObject.
            	 * The TuioTime time stamp of this TuioContainer remains unchanged.
            	 *
            	 * @param	tobj	the TuioContainer to assign
        </member>
        <member name="M:TUIO.TuioObject.stop(TUIO.TuioTime)">
            This method is used to calculate the speed and acceleration values of a
            TuioObject with unchanged position and angle.
        </member>
        <member name="M:TUIO.TuioObject.getSymbolID">
            Returns the symbol ID of this TuioObject.
            @return	the symbol ID of this TuioObject
        </member>
        <member name="M:TUIO.TuioObject.getAngle">
            Returns the rotation angle of this TuioObject.
            @return	the rotation angle of this TuioObject
        </member>
        <member name="M:TUIO.TuioObject.getAngleDegrees">
            Returns the rotation angle in degrees of this TuioObject.
            @return	the rotation angle in degrees of this TuioObject
        </member>
        <member name="M:TUIO.TuioObject.getRotationSpeed">
            Returns the rotation speed of this TuioObject.
            @return	the rotation speed of this TuioObject
        </member>
        <member name="M:TUIO.TuioObject.getRotationAccel">
            Returns the rotation acceleration of this TuioObject.
            @return	the rotation acceleration of this TuioObject
        </member>
        <member name="M:TUIO.TuioObject.isMoving">
            Returns true of this TuioObject is moving.
            @return	true of this TuioObject is moving
        </member>
        <member name="T:TUIO.TuioTime">
             The TuioTime class is a simple structure that is used to reprent the time that has elapsed since the session start.
             The time is internally represented as seconds and fractions of microseconds which should be more than sufficient for gesture related timing requirements.
             Therefore at the beginning of a typical TUIO session the static method initSession() will set the reference time for the session.
             Another important static method getSessionTime will return a TuioTime object representing the time elapsed since the session start.
             The class also provides various addtional convience method, which allow some simple time arithmetics.
            
             @author Martin Kaltenbrunner
             @version 1.4
        </member>
        <member name="F:TUIO.TuioTime.seconds">
            the time since session start in seconds
        </member>
        <member name="F:TUIO.TuioTime.micro_seconds">
            time fraction in microseconds
        </member>
        <member name="F:TUIO.TuioTime.start_seconds">
            the session start time in seconds
        </member>
        <member name="F:TUIO.TuioTime.start_micro_seconds">
            start time fraction in microseconds
        </member>
        <member name="M:TUIO.TuioTime.#ctor">
            The default constructor takes no arguments and sets
            the Seconds and Microseconds attributes of the newly created TuioTime both to zero.
        </member>
        <member name="M:TUIO.TuioTime.#ctor(System.Int64)">
             This constructor takes the provided time represented in total Milliseconds
             and assigs this value to the newly created TuioTime.
            
             @param msec the total time in Millseconds
        </member>
        <member name="M:TUIO.TuioTime.#ctor(System.Int64,System.Int64)">
             This constructor takes the provided time represented in Seconds and Microseconds
             and assigs these value to the newly created TuioTime.
            
             @param sec the total time in seconds
             @param usec	the microseconds time component
        </member>
        <member name="M:TUIO.TuioTime.#ctor(TUIO.TuioTime)">
             This constructor takes the provided TuioTime
             and assigs its Seconds and Microseconds values to the newly created TuioTime.
            
             @param ttime the TuioTime used to copy
        </member>
        <member name="M:TUIO.TuioTime.op_Addition(TUIO.TuioTime,System.Int64)">
             Sums the provided time value represented in total Microseconds to the base TuioTime.
            
             @param btime	the base TuioTime
             @param us	the total time to add in Microseconds
             @return the sum of this TuioTime with the provided argument in microseconds
        </member>
        <member name="M:TUIO.TuioTime.op_Addition(TUIO.TuioTime,TUIO.TuioTime)">
             Sums the provided TuioTime to the base TuioTime.
            
             @param btime	the base TuioTime
             @param ttime	the TuioTime to add
             @return the sum of this TuioTime with the provided TuioTime argument
        </member>
        <member name="M:TUIO.TuioTime.op_Subtraction(TUIO.TuioTime,System.Int64)">
             Subtracts the provided time represented in Microseconds from the base TuioTime.
            
             @param btime	the base TuioTime
             @param us	the total time to subtract in Microseconds
             @return the subtraction result of this TuioTime minus the provided time in Microseconds
        </member>
        <member name="M:TUIO.TuioTime.op_Subtraction(TUIO.TuioTime,TUIO.TuioTime)">
             Subtracts the provided TuioTime from the private Seconds and Microseconds attributes.
            
             @param btime	the base TuioTime
             @param ttime	the TuioTime to subtract
             @return the subtraction result of this TuioTime minus the provided TuioTime
        </member>
        <member name="M:TUIO.TuioTime.Equals(TUIO.TuioTime)">
             Takes a TuioTime argument and compares the provided TuioTime to the private Seconds and Microseconds attributes.
            
             @param ttime	the TuioTime to compare
             @return true if the two TuioTime have equal Seconds and Microseconds attributes
        </member>
        <member name="M:TUIO.TuioTime.reset">
            Resets the seconds and micro_seconds attributes to zero.
        </member>
        <member name="M:TUIO.TuioTime.getSeconds">
            Returns the TuioTime Seconds component.
            @return the TuioTime Seconds component
        </member>
        <member name="M:TUIO.TuioTime.getMicroseconds">
            Returns the TuioTime Microseconds component.
            @return the TuioTime Microseconds component
        </member>
        <member name="M:TUIO.TuioTime.getTotalMilliseconds">
            Returns the total TuioTime in Milliseconds.
            @return the total TuioTime in Milliseconds
        </member>
        <member name="M:TUIO.TuioTime.initSession">
            This static method globally resets the TUIO session time.
        </member>
        <member name="M:TUIO.TuioTime.getSessionTime">
            Returns the present TuioTime representing the time since session start.
            @return the present TuioTime representing the time since session start
        </member>
        <member name="M:TUIO.TuioTime.getStartTime">
            Returns the absolut TuioTime representing the session start.
            @return the absolut TuioTime representing the session start
        </member>
        <member name="M:TUIO.TuioTime.getSystemTime">
            Returns the absolut TuioTime representing the current system time.
            @return the absolut TuioTime representing the current system time
        </member>
        <member name="T:Game.ProductLogoWindow">
            <summary>
            Defines a your project logo window.
            </summary>
        </member>
        <member name="T:Game.GameEngineApp">
            <summary>
            Defines a game application.
            </summary>
        </member>
        <member name="T:Game.MenuWindow">
            <summary>
            Defines a system game menu.
            </summary>
        </member>
        <member name="T:Game.MessageBoxWindow">
            <summary>
            Defines a "MessageBox" window.
            </summary>
        </member>
        <member name="T:Game.OptionsWindow">
            <summary>
            Defines a window of options.
            </summary>
        </member>
        <member name="T:Game.MainMenuWindow">
            <summary>
            Defines a main menu.
            </summary>
        </member>
        <member name="M:Game.MainMenuWindow.OnAttach">
            <summary>
            Creates a window of the main menu and creates the background world.
            </summary>
        </member>
        <member name="M:Game.MainMenuWindow.OnDetach">
            <summary>
            Destroys the background world at closing the main menu.
            </summary>
        </member>
        <member name="M:Game.MainMenuWindow.CreateMap">
            <summary>
            Creates the background world.
            </summary>
        </member>
        <member name="M:Game.MainMenuWindow.DestroyMap">
            <summary>
            Destroys the background world.
            </summary>
        </member>
        <member name="T:Game.Program">
            <summary>
            Defines an input point in the application.
            </summary>
        </member>
        <member name="M:Game.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Game.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Game.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Game.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Game.Properties.Resources.Logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:Game.EngineLogoWindow">
            <summary>
            Defines a NeoAxis Engine Logo window.
            </summary>
        </member>
    </members>
</doc>
