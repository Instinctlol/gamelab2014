<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utils</name>
    </assembly>
    <members>
        <member name="M:Engine.Utils.ReceiveDataReader.ReadVariableUInt32">
            <summary>
            Reads a UInt32 written using WriteUnsignedVarInt()
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.ReadVariableInt32">
            <summary>
            Reads a Int32 written using WriteSignedVarInt()
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.ReadVariableUInt64">
            <summary>
            Reads a UInt32 written using WriteUnsignedVarInt()
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.ReadSignedSingle(System.Int32)">
            <summary>
            Reads a float written using WriteSignedSingle()
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.ReadUnitSingle(System.Int32)">
            <summary>
            Reads a float written using WriteUnitSingle()
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.ReadRangedSingle(System.Single,System.Single,System.Int32)">
            <summary>
            Reads a float written using WriteRangedSingle() using the same MIN and MAX values
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.ReadRangedInteger(System.Int32,System.Int32)">
            <summary>
            Reads an integer written using WriteRangedInteger() using the same min/max values
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.SkipPadBits">
            <summary>
            Pads data with enough bits to reach a full byte. Decreases cpu usage for subsequent byte writes.
            </summary>
        </member>
        <member name="M:Engine.Utils.ReceiveDataReader.SkipPadBits(System.Int32)">
            <summary>
            Pads data with the specified number of bits.
            </summary>
        </member>
        <member name="M:Engine.Utils.SimpleTypesUtils.GetSimpleTypeValue(System.Type,System.String)">
            <summary>
            If null - not simple type
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Engine.Utils.DataBlockUtils">
            <summary>
            Auxiliary class for work with <see cref="T:Engine.Utils.DataBlock"/>.
            </summary>
        </member>
        <member name="M:Engine.Utils.DataBlockUtils.LoadFromVirtualFile(System.String,System.String@)">
            <summary>
            Loads the block from a file of virtual file system.
            </summary>
            <param name="path">The virtual file path.</param>
            <param name="errorString">The information on an error.</param>
            <returns><see cref="T:Engine.Utils.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Engine.Utils.DataBlockUtils.LoadFromVirtualFile(System.String)">
            <summary>
            Loads the block from a file of virtual file system.
            </summary>
            <param name="path">The virtual file path.</param>
            <returns><see cref="T:Engine.Utils.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Engine.Utils.DataBlockUtils.LoadFromRealFile(System.String,System.String@)">
            <summary>
            Loads the block from a file of real file system.
            </summary>
            <param name="path">The real file path.</param>
            <param name="errorString">The information on an error.</param>
            <returns><see cref="T:Engine.Utils.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Engine.Utils.DataBlockUtils.LoadFromRealFile(System.String)">
            <summary>
            Loads the block from a file of real file system.
            </summary>
            <param name="path">The real file path.</param>
            <returns><see cref="T:Engine.Utils.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="T:Engine.Utils.ListAllocator`1">
             <summary>
             Class for reduction of allocation of memory at use of lists.
             </summary>
             <example>This example shows work of a class.
             <code>
             static ListAllocator&lt;int&gt; intListAllocator = new ListAllocator&lt;int&gt;();
             
             void SomeMethod()
             {
            	for( int n = 0; n &lt; 100; n++ )
            	{
            		//Get list
            		List&lt;int&gt; list = intListAllocator.Alloc();
            
            		//Some work with list
            
            		//free list
            		intListAllocator.Free( list );
            	}
             }
             </code>
             </example>
             <typeparam name="ItemType">Type of an element in the list.</typeparam>
        </member>
        <member name="M:Engine.Utils.ListAllocator`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engine.Utils.ListAllocator`1"/> class.
            </summary>
        </member>
        <member name="M:Engine.Utils.ListAllocator`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engine.Utils.ListAllocator`1"/> class.
            </summary>
            <param name="listsCapacity">The initial lists capacity.</param>
        </member>
        <member name="M:Engine.Utils.ListAllocator`1.Alloc">
            <summary>
            Allocates a list. After use it is necessary to free by means of method <see cref="M:Engine.Utils.ListAllocator`1.Free(System.Collections.Generic.List{`0})"/>.
            </summary>
            <returns></returns>
            <seealso cref="M:Engine.Utils.ListAllocator`1.Free(System.Collections.Generic.List{`0})"/>
        </member>
        <member name="M:Engine.Utils.ListAllocator`1.Free(System.Collections.Generic.List{`0})">
            <summary>
            Free the allocated list.
            </summary>
            <param name="list">The allocated list.</param>
            <seealso cref="M:Engine.Utils.ListAllocator`1.Alloc"/>
        </member>
        <member name="P:Engine.Utils.ListAllocator`1.AllocatedCount">
            <summary>
            Gets the amount of the allocated lists.
            </summary>
        </member>
        <member name="T:Engine.Utils.DataBlock">
            <summary>
            The class allows to store the data information in the hierarchical form.
            Supports creation of children and attributes.
            </summary>
        </member>
        <member name="M:Engine.Utils.DataBlock.#ctor">
            <summary>
            It is applied only to creation root blocks. Not for creation of children.
            </summary>
        </member>
        <member name="M:Engine.Utils.DataBlock.FindChild(System.String)">
            <summary>
            Finds child block by name.
            </summary>
            <param name="name">The block name.</param>
            <returns><see cref="T:Engine.Utils.DataBlock"/> if the block has been exists; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Engine.Utils.DataBlock.AddChild(System.String)">
            <summary>
            Creates the child block.
            </summary>
            <param name="name">The block name.</param>
            <returns>The child block.</returns>
            <remarks>
            Names of blocks can repeat.
            </remarks>
        </member>
        <member name="M:Engine.Utils.DataBlock.DeleteChild(Engine.Utils.DataBlock)">
            <summary>
            Deletes child block.
            </summary>
            <param name="child">The child block.</param>
        </member>
        <member name="M:Engine.Utils.DataBlock.GetAttribute(System.String)">
            <summary>
            Returns the attribute by name if exists.
            </summary>
        </member>
        <member name="M:Engine.Utils.DataBlock.IsAttributeExist(System.String)">
            <summary>
            Checks existence of attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns><b>true</b> if the block exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.Utils.DataBlock.SetAttribute(System.String,System.ArraySegment{System.Byte},System.Boolean)">
            <summary>
            Sets attribute. If such already there is that rewrites him.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <param name="cloneArray"></param>
        </member>
        <member name="M:Engine.Utils.DataBlock.DeleteAttribute(System.String)">
            <summary>
            Deletes attribute if he exists.
            </summary>
            <param name="name">The attribute name.</param>
        </member>
        <member name="M:Engine.Utils.DataBlock.DeleteAllAttributes">
            <summary>
            Deletes all attributes.
            </summary>
        </member>
        <member name="M:Engine.Utils.DataBlock.DumpToBuffer">
            <summary>
            Returns a buffer containing all data about the block and his children.
            </summary>
            <returns>A string containing all data about the block and his children.</returns>
            <remarks>
            This method is applied at preservation of data of the block in a file.
            </remarks>
        </member>
        <member name="M:Engine.Utils.DataBlock.ToString">
            <summary>
            Returns a string that represents the current text block.
            </summary>
            <returns>A string that represents the current text block.</returns>
        </member>
        <member name="M:Engine.Utils.DataBlock.Parse(System.Byte[],System.Boolean,System.String@)">
            <summary>
            Parses the text with data of the block and his children.
            </summary>
            <param name="data">The data.</param>
            <param name="cloneDataArray"></param>
            <param name="errorString">The information on an error.</param>
            <returns><see cref="T:Engine.Utils.DataBlock"/> if the block has been parsed; otherwise, <b>null</b>.</returns>
            <remarks>
            For convenience of loading of blocks there is auxiliary class <see cref="T:Engine.Utils.DataBlockUtils"/>.
            </remarks>
        </member>
        <member name="P:Engine.Utils.DataBlock.Parent">
            <summary>
            Gets the parent block.
            </summary>
        </member>
        <member name="P:Engine.Utils.DataBlock.Name">
            <summary>
            Gets or set block name.
            </summary>
        </member>
        <member name="P:Engine.Utils.DataBlock.Children">
            <summary>
            Gets the children collection. <b>Don't modify.</b>
            </summary>
        </member>
        <member name="P:Engine.Utils.DataBlock.Attributes">
            <summary>
            Gets the attributes collection. <b>Don't modify.</b>
            </summary>
        </member>
        <member name="T:Engine.Utils.DataBlock.Attribute">
            <summary>
            Defines <see cref="T:Engine.Utils.DataBlock"/> attribute.
            </summary>
        </member>
        <member name="M:Engine.Utils.DataBlock.Attribute.ToString">
            <summary>
            Returns a string that represents the current attribute.
            </summary>
            <returns>A string that represents the current attribute.</returns>
        </member>
        <member name="P:Engine.Utils.DataBlock.Attribute.Name">
            <summary>
            Gets the attribute name.
            </summary>
        </member>
        <member name="T:Engine.Utils.CRC32">
            <summary>
            Class for calculation CRC32 checksums.
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.#cctor">
            <summary>
            Initialize the cache
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.BuildCRC32Table(System.UInt32)">
            <summary>
            Builds a crc32 table given a polynomial
            </summary>
            <param name="polynomial"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Utils.CRC32.#ctor">
            <summary>
            Creates a CRC32 object using the DefaultPolynomial
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.#ctor(System.UInt32)">
            <summary>
            Creates a CRC32 object using the specified Creates a CRC32 object 
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Construct the 
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.Initialize">
            <summary>
            Initializes an implementation of HashAlgorithm.
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Engine.Utils.CRC32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Utils.CRC32.ComputeHash(System.IO.Stream)">
            <summary>
            Computes the hash value for the specified Stream.
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.ComputeHash(System.Byte[])">
            <summary>
            Overloaded. Computes the hash value for the input data.
            </summary>
        </member>
        <member name="M:Engine.Utils.CRC32.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overloaded. Computes the hash value for the input data.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Engine.Utils.CRC32.DefaultPolynomial">
            <summary>
            Returns the default polynomial
            </summary>
        </member>
        <member name="P:Engine.Utils.CRC32.AutoCache">
            <summary>
            Gets or sets the auto-cache setting of this class.
            </summary>
        </member>
        <member name="T:Engine.Utils.Pair`2">
            <summary>
            Defines a pair that can be set or retrieved.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Engine.Utils.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Engine.Utils.Pair`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:Engine.Utils.Pair`2.First">
            <summary>
            Gets the first value in the pair.
            </summary>
        </member>
        <member name="P:Engine.Utils.Pair`2.Second">
            <summary>
            Gets the second value in the pair.
            </summary>
        </member>
        <member name="T:Engine.Utils.EditorMessageBox.Result">
            <summary>
            Specifies identifiers to indicate the return value of a message box.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.None">
            <summary>
            Nothing is returned from the dialog box. This means that the modal dialog continues running.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.OK">
            <summary>
            The dialog box return value is OK (usually sent from a button labeled OK).
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.Cancel">
            <summary>
            The dialog box return value is Cancel (usually sent from a button labeled Cancel).
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.Abort">
            <summary>
            The dialog box return value is Abort (usually sent from a button labeled Abort).
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.Retry">
            <summary>
            The dialog box return value is Retry (usually sent from a button labeled Retry).
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.Ignore">
            <summary>
            The dialog box return value is Ignore (usually sent from a button labeled Ignore).
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.Yes">
            <summary>
            The dialog box return value is Yes (usually sent from a button labeled Yes).
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Result.No">
            <summary>
            The dialog box return value is No (usually sent from a button labeled No).
            </summary>
        </member>
        <member name="T:Engine.Utils.EditorMessageBox.Buttons">
            <summary>
            Specifies constants defining which buttons to display.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Buttons.OK">
            <summary>
            The message box contains an OK button.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Buttons.OKCancel">
            <summary>
            The message box contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Buttons.AbortRetryIgnore">
            <summary>
            The message box contains Abort, Retry, and Ignore buttons.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Buttons.YesNoCancel">
            <summary>
            The message box contains Yes, No, and Cancel buttons.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Buttons.YesNo">
            <summary>
            The message box contains Yes and No buttons.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Buttons.RetryCancel">
            <summary>
            The message box contains Retry and Cancel buttons.
            </summary>
        </member>
        <member name="T:Engine.Utils.EditorMessageBox.Icon">
            <summary>
            Specifies constants defining which information to display.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.None">
            <summary>
            The message box contain no symbols.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Error">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Hand">
            <summary>
            The message box contains a symbol consisting of a white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Stop">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Question">
            <summary>
            The message box contains a symbol consisting of a question mark in a circle.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Exclamation">
            <summary>
            The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Warning">
            <summary>
            The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Information">
            <summary>
            The message box contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="F:Engine.Utils.EditorMessageBox.Icon.Asterisk">
            <summary>
            The message box contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="T:Engine.Utils.FileChecksum">
            <summary>
            Class for calculating checksums.
            </summary>
        </member>
        <member name="M:Engine.Utils.FileChecksum.CalculateVirtualFileChecksum(System.String)">
            <summary>
            Calculates the check sum of a file.
            </summary>
            <param name="path">The virtual file path.</param>
        </member>
        <member name="M:Engine.Utils.FileChecksum.CalculateRealFileChecksum(System.String)">
            <summary>
            Calculates the check sum of a file.
            </summary>
            <param name="path">The real file path.</param>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WriteVariableUInt32(System.UInt32)">
            <summary>
            Write Base128 encoded variable sized unsigned integer
            </summary>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WriteVariableInt32(System.Int32)">
            <summary>
            Write Base128 encoded variable sized signed integer
            </summary>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WriteVariableUInt64(System.UInt64)">
            <summary>
            Write Base128 encoded variable sized unsigned integer
            </summary>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WriteSignedSingle(System.Single,System.Int32)">
            <summary>
            Compress (lossy) a float in the range -1..1 using numberOfBits bits
            </summary>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WriteUnitSingle(System.Single,System.Int32)">
            <summary>
            Compress (lossy) a float in the range 0..1 using numberOfBits bits
            </summary>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WriteRangedSingle(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Compress a float within a specified range using a certain number of bits
            </summary>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WriteRangedInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an integer with the least amount of bits need for the specified range
            </summary>
            <returns>number of bits written</returns>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WritePadBits">
            <summary>
            Pads data with enough bits to reach a full byte. Decreases cpu usage for subsequent byte writes.
            </summary>
        </member>
        <member name="M:Engine.Utils.SendDataWriter.WritePadBits(System.Int32)">
            <summary>
            Pads data with the specified number of bits.
            </summary>
        </member>
        <member name="T:Engine.Utils.DebugGeometry">
            <summary>
            Defines a class for a rendering of debugging geometry.
            </summary>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.SetSpecialDepthSettings(System.Boolean,System.Boolean)">
            <summary>
            Sets the depth test and depth write settings.
            Must call <see cref="M:Engine.Utils.DebugGeometry.RestoreDefaultDepthSettings"/> after adding geometry.
            </summary>
            <param name="depthTest"></param>
            <param name="depthWrite"></param>
            <remarks>
            Default settings: depth test = <b>true</b>, depth write = <b>false</b>.
            </remarks>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.RestoreDefaultDepthSettings">
            <summary>
            Restore default depth settings after call <see cref="M:Engine.Utils.DebugGeometry.SetSpecialDepthSettings(System.Boolean,System.Boolean)"/>.
            </summary>
            <remarks>
            Default settings: depth test = <b>true</b>, depth write = <b>false</b>.
            </remarks>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddLine(Engine.MathEx.Vec3,Engine.MathEx.Vec3)">
            <summary>
            Renders a line.
            </summary>
            <param name="start">The line start position.</param>
            <param name="end">The line end position.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddLine(Engine.MathEx.Line)">
            <summary>
            Renders a line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddBounds(Engine.MathEx.Bounds)">
            <summary>
            Renders a bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddSphere(Engine.MathEx.Sphere,System.Int32)">
            <summary>
            Renders a sphere.
            </summary>
            <param name="sphere">The sphere</param>
            <param name="segments">The count of lines in circles of sphere.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddSphere(Engine.MathEx.Sphere)">
            <summary>
            Renders a sphere.
            </summary>
            <param name="sphere">The sphere</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddBox(Engine.MathEx.Box)">
            <summary>
            Renders a box.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Vec3,Engine.MathEx.Vec3,System.Single,System.Boolean)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="from">The arrow start position.</param>
            <param name="to">The arrow end position.</param>
            <param name="arrowSize">The size of arrow.</param>
            <param name="noLine">Whether to draw directing line.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Line,System.Single,System.Boolean)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="arrow">The arrow.</param>
            <param name="arrowSize">The size of arrow.</param>
            <param name="noLine">Whether to draw directing line.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Ray,System.Single,System.Boolean)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="arrow">The arrow.</param>
            <param name="arrowSize">The size of arrow.</param>
            <param name="noLine">Whether to draw directing line.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Vec3,Engine.MathEx.Vec3,System.Single)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="from">The arrow start position.</param>
            <param name="to">The arrow end position.</param>
            <param name="arrowSize">The size of arrow.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Line,System.Single)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="arrow">The arrow.</param>
            <param name="arrowSize">The size of arrow.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Ray,System.Single)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="arrow">The arrow ray.</param>
            <param name="arrowSize">The size of arrow.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Vec3,Engine.MathEx.Vec3)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="from">The arrow start position.</param>
            <param name="to">The arrow end position.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Line)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="arrow">The arrow.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddArrow(Engine.MathEx.Ray)">
            <summary>
            Renders an arrow.
            </summary>
            <param name="arrow">The arrow ray.</param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddCone(Engine.MathEx.Vec3,Engine.MathEx.Quat,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Render a cone.
            </summary>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="length"></param>
            <param name="radius"></param>
            <param name="edgeSegments"></param>
            <param name="basicSegments"></param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddCapsule(Engine.MathEx.Capsule,System.Int32)">
            <summary>
            Render a capsule.
            </summary>
            <param name="capsule"></param>
            <param name="segments"></param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddCapsule(Engine.MathEx.Capsule)">
            <summary>
            Render a capsule.
            </summary>
            <param name="capsule"></param>
        </member>
        <member name="M:Engine.Utils.DebugGeometry.AddVertexIndexBuffer(System.Collections.Generic.IList{Engine.MathEx.Vec3},System.Collections.Generic.IList{System.Int32},Engine.MathEx.Mat4,System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="transform">The world transformation.</param>
            <param name="wireFrame">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="P:Engine.Utils.DebugGeometry.Color">
            <summary>
            Sets the color.
            </summary>
        </member>
        <member name="T:Engine.Utils.EngineRandom">
            <summary>
            Represents a pseudo-random number generator, a device that produces a sequence
            of numbers that meet certain statistical requirements for randomness.
            </summary>
        </member>
        <member name="M:Engine.Utils.EngineRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engine.Utils.EngineRandom"/> class, 
            using a time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Engine.Utils.EngineRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engine.Utils.EngineRandom"/> class, 
            using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number
            sequence. If a negative number is specified, the absolute value of the number
            is used.
            </param>
        </member>
        <member name="M:Engine.Utils.EngineRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than System.Int32.MaxValue.
            </returns>
        </member>
        <member name="M:Engine.Utils.EngineRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            maxValue must be greater than or equal to zero.
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue;
            that is, the range of return values includes zero but not maxValue.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue is less than zero.</exception>
        </member>
        <member name="M:Engine.Utils.EngineRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. maxValue must be
            greater than or equal to minValue.
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue;
            that is, the range of return values includes minValue but not maxValue. If
            minValue equals maxValue, minValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">minValue is greater than maxValue.</exception>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextFloat">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextBool">
            <summary>
            Returns a single random bit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextDoubleCenter">
            <summary>
            Returns a random number between -0.5 and 0.5.
            </summary>
            <returns>A floating point number greater than or equal to -0.5, and less than 0.5.</returns>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextFloatCenter">
            <summary>
            Returns a random number between -0.5 and 0.5.
            </summary>
            <returns>A floating point number greater than or equal to -0.5, and less than 0.5.</returns>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextFloat(System.Single,System.Single)">
            <summary>
            Returns a random number between min and max values.
            </summary>
            <returns>A floating point number greater than to minValue, and less than to maxValue.</returns>
        </member>
        <member name="M:Engine.Utils.EngineRandom.NextFloat(System.Single)">
            <summary>
            Returns a random number between zero and max value.
            </summary>
            <returns>A floating point number greater than to zero, and less than to maxValue.</returns>
        </member>
        <member name="M:Engine.Utils.BitWriter.ReadByte(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read 1-8 bits from a buffer into a byte
            </summary>
        </member>
        <member name="M:Engine.Utils.BitWriter.ReadBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Read several bytes from a buffer
            </summary>
        </member>
        <member name="M:Engine.Utils.BitWriter.WriteByte(System.Byte,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write a byte consisting of 1-8 bits to a buffer; assumes buffer is previously allocated
            </summary>
        </member>
        <member name="M:Engine.Utils.BitWriter.WriteBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write several whole bytes
            </summary>
        </member>
        <member name="M:Engine.Utils.BitWriter.WriteVariableUInt32(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Write Base128 encoded variable sized unsigned integer
            </summary>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:Engine.Utils.BitWriter.ReadVariableUInt32(System.Byte[],System.Int32@)">
            <summary>
            Reads a UInt32 written using WriteUnsignedVarInt(); will increment offset!
            </summary>
        </member>
        <member name="T:Engine.Utils.MeshGeometryReceiver">
            <summary>
            Defines a class for reception of geometry of 3D models.
            </summary>
        </member>
        <member name="M:Engine.Utils.MeshGeometryReceiver.GetData(System.String,System.Collections.Generic.List{Engine.MathEx.Vec3}@,System.Collections.Generic.List{System.Int32}@,System.Boolean)">
            <summary>
            Receives geometry from a 3D model.
            </summary>
            <param name="meshFileName">The file name of a mesh.</param>
            <param name="vertices">The out vertices buffer.</param>
            <param name="indices">The out indices buffer.</param>
            <param name="ignoreSubMeshesWithDisabledCollision">Ignore sub meshes who has property "AllowCollision" is equal <b>false</b>.</param>
            <returns><b>true</b> if the geometry successfully receiver; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.Utils.MeshGeometryReceiver.GetData(System.String,System.Collections.Generic.List{Engine.MathEx.Vec3}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Receives geometry from a 3D model.
            </summary>
            <param name="meshFileName">The file name of a mesh.</param>
            <param name="vertices">The out vertices buffer.</param>
            <param name="indices">The out indices buffer.</param>
            <returns><b>true</b> if the geometry successfully receiver; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.Utils.MeshGeometryReceiver.GetData(System.String,Engine.MathEx.Vec3[]@,System.Int32[]@,System.Boolean)">
            <summary>
            Receives geometry from a 3D model.
            </summary>
            <param name="meshFileName">The file name of a mesh.</param>
            <param name="vertices">The out vertices buffer.</param>
            <param name="indices">The out indices buffer.</param>
            <param name="ignoreSubMeshesWithDisabledCollision">Ignore sub meshes who has property "AllowCollision" is equal <b>false</b>.</param>
            <returns><b>true</b> if the geometry successfully receiver; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.Utils.MeshGeometryReceiver.GetData(System.String,Engine.MathEx.Vec3[]@,System.Int32[]@)">
            <summary>
            Receives geometry from a 3D model.
            </summary>
            <param name="meshFileName">The file name of a mesh.</param>
            <param name="vertices">The out vertices buffer.</param>
            <param name="indices">The out indices buffer.</param>
            <returns><b>true</b> if the geometry successfully receiver; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Engine.Utils.MeshGeometryReceiver.Instance">
            Gets an instance of the <see cref="T:Engine.Utils.MeshGeometryReceiver"/>.
        </member>
        <member name="M:Engine.Utils.AssemblyUtils.ParseAssemblyFileDetails(System.IO.Stream,Engine.Utils.AssemblyUtils.FrameworkVersions@)">
            <summary>
            Gets the framework version by assembly file. Use try/catch for error detection.
            </summary>
            <param name="stream">The stream with dll file data.</param>
            <param name="frameworkVersion"></param>
        </member>
        <member name="F:Engine.Utils.AssemblyUtils.FrameworkVersions.Unknown">
            <summary>
            The .NET Framework version was unrecognized.
            </summary>
        </member>
        <member name="F:Engine.Utils.AssemblyUtils.FrameworkVersions.Net2_0">
            <summary>
            .NET Framework 2.0 (includes .NET 3.0 and 3.5).
            </summary>
        </member>
        <member name="F:Engine.Utils.AssemblyUtils.FrameworkVersions.Net4_0">
            <summary>
            .NET Framework 4.0.
            </summary>
        </member>
        <member name="T:Engine.Utils.LocalizedEnumConverter">
            <summary>
            Defines a type converter for enumerations. A attribute <see cref="T:Engine.Utils.LocalizedDisplayNameAttribute"/> 
            also supported.
            </summary>
        </member>
        <member name="M:Engine.Utils.LocalizedEnumConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Engine.Utils.LocalizedEnumConverter"/> class.
            </summary>
            <param name="type">The enumeration type.</param>
        </member>
    </members>
</doc>
