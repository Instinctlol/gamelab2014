<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GestureLib</name>
    </assembly>
    <members>
        <member name="T:GestureLib.GestureActionCollection">
            <summary>
            Holds a list of gesture actions
            </summary>
        </member>
        <member name="T:GestureLib.GenericBaseCollection`1">
            <summary>
            Abstract base collection, which methods can be overriden with a full support to List&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:GestureLib.GestureActionCollection.ExecuteAll">
            <summary>
            Calls the Execute-method of all available gesture actions in this collection.
            </summary>
        </member>
        <member name="M:GestureLib.GestureActionCollection.Add(GestureLib.IGestureAction)">
            <summary>
            Adds the specified gesture action item and names it automatically if no name was assigned and Autonaming is enabled internally.
            </summary>
            <param name="item">The gesture action item.</param>
        </member>
        <member name="T:GestureLib.GestureAlgorithmCollection">
            <summary>
            Holds a list of gesture algorithms
            </summary>
        </member>
        <member name="M:GestureLib.GestureAlgorithmCollection.Add(GestureLib.IGestureAlgorithm)">
            <summary>
            Adds the specified gesture algorithm item and names it automatically if no name was assigned and Autonaming is enabled internally.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:GestureLib.IAccelerationGestureAlgorithm">
            <summary>
            Describes methods and properties must be used in new acceleration algorithms
            </summary>
        </member>
        <member name="T:GestureLib.IGestureAlgorithm">
            <summary>
            Defines a base interface for pointer and acceleration algorithms.
            </summary>
        </member>
        <member name="T:GestureLib.INamed">
            <summary>
            Defines the methods and properties for classes which can be identified by a name.
            </summary>
        </member>
        <member name="P:GestureLib.INamed.Name">
            <summary>
            Gets or sets the name to identifiy this object.
            </summary>
            <value>The name to identify this object.</value>
        </member>
        <member name="M:GestureLib.IAccelerationGestureAlgorithm.CalculateMatching(GestureLib.GestureStateCollection{GestureLib.AccelerationGestureState})">
            <summary>
            Calculates the matching of a collection of acceleration gesture states, with this algorithm.
            </summary>
            <param name="gestureStates">The acceleration gesture states.</param>
            <returns>A indicator between 0 and 1 for the probability, that the gesture matched.</returns>
        </member>
        <member name="T:GestureLib.IPointerGestureAlgorithm">
            <summary>
            Describes methods and properties must be used in new pointer algorithms
            </summary>
        </member>
        <member name="M:GestureLib.IPointerGestureAlgorithm.CalculateMatching(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculates the matching of two points with this algorithm.
            </summary>
            <param name="fromPoint">Start point.</param>
            <param name="toPoint">End point.</param>
            <returns>An indicator between 0 and 1 for the probability, that the gesture matched.</returns>
        </member>
        <member name="T:GestureLib.AbstractConfigurationManager">
            <summary>
            Describes a base class for new configuration managers (e.g. xml or several databases).
            With this classes TrainedGestures easily can be saved or loaded.
            </summary>
        </member>
        <member name="M:GestureLib.AbstractConfigurationManager.Save">
            <summary>
            Saves the TrainedGesture values.
            </summary>
        </member>
        <member name="M:GestureLib.AbstractConfigurationManager.Load">
            <summary>
            Loads the TrainedGesture values.
            </summary>
        </member>
        <member name="M:GestureLib.AbstractConfigurationManager.GetGestureAlgorithmByName(System.String)">
            <summary>
            Gets a gesture algorithm by a given name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:GestureLib.AbstractConfigurationManager.GetGestureActionByName(System.String)">
            <summary>
            Gets a gesture action by a given name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:GestureLib.AbstractConfigurationManager.GestureLib">
            <summary>
            Gets the reference to the source instance of the gesture lib.
            </summary>
            <value>The gesture lib.</value>
        </member>
        <member name="T:GestureLib.IMouseEmulationDevice">
            <summary>
            Describes the methods and properties, which must be implemented, when a gesture device should be used as a mouse replacement
            </summary>
        </member>
        <member name="E:GestureLib.IMouseEmulationDevice.MouseEmulationStateChanged">
            <summary>
            Occurs when mouse state changed.
            </summary>
        </member>
        <member name="T:GestureLib.MouseEmulationStateEventArgs">
            <summary>
            Describes the event arguments of a mouse event
            </summary>
        </member>
        <member name="M:GestureLib.MouseEmulationStateEventArgs.#ctor(System.Nullable{System.Drawing.PointF},System.Nullable{GestureLib.MouseButtonState})">
            <summary>
            Initializes a new instance of the <see cref="T:GestureLib.MouseEmulationStateEventArgs"/> class.
            </summary>
            <param name="mousePosition">The new mouse position.</param>
            <param name="mouseButtonState">The new state of the mouse button.</param>
        </member>
        <member name="P:GestureLib.MouseEmulationStateEventArgs.MousePosition">
            <summary>
            Gets the mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="P:GestureLib.MouseEmulationStateEventArgs.MouseButtonState">
            <summary>
            Gets the state of the mouse button.
            </summary>
            <value>The state of the mouse button.</value>
        </member>
        <member name="T:GestureLib.GestureStateCollection`1">
            <summary>
            Holds a list of GestureStates
            </summary>
            <typeparam name="T">Must implement the Interface <see cref="T:GestureLib.IGestureState"/></typeparam>
        </member>
        <member name="T:GestureLib.MouseButtonState">
            <summary>
            Defines the button action of the mouse
            </summary>
        </member>
        <member name="F:GestureLib.MouseButtonState.LeftButtonDown">
            <summary>
            Press left mouse button
            </summary>
        </member>
        <member name="F:GestureLib.MouseButtonState.RightButtonDown">
            <summary>
            Press right mouse button
            </summary>
        </member>
        <member name="F:GestureLib.MouseButtonState.LeftButtonUp">
            <summary>
            Stop pressing left mouse button
            </summary>
        </member>
        <member name="F:GestureLib.MouseButtonState.RightButtonUp">
            <summary>
            Stop pressing right mouse button
            </summary>
        </member>
        <member name="T:GestureLib.MouseApi">
            <summary>
            Provides functionality for moving the mouse cursor and simulating mouse clicks
            </summary>
        </member>
        <member name="M:GestureLib.MouseApi.SetButtonState(GestureLib.MouseButtonState)">
            <summary>
            Sets the state of the mouse button.
            </summary>
            <param name="mouseButtonState">State of the mouse button.</param>
        </member>
        <member name="P:GestureLib.MouseApi.MousePosition">
            <summary>
            Gets or sets the current mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="M:GestureLib.OverlayForm.SetCurrentPoint(System.Drawing.PointF)">
            <summary>
            Sets the current point, which will bei shown on the semi-transparency form.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="F:GestureLib.OverlayForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GestureLib.OverlayForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GestureLib.OverlayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:GestureLib.OverlayForm.PointerSize">
            <summary>
            Gets or sets the size of the pointer, which shows the last drawn coordinates.
            </summary>
            <value>The size of the pointer.</value>
        </member>
        <member name="T:GestureLib.HorizontalTendenceDirection">
            <summary>
            Defines a tendence of a line in the horizontal direction
            </summary>
        </member>
        <member name="F:GestureLib.HorizontalTendenceDirection.None">
            <summary>
            Line runs exactly straight down or up
            </summary>
        </member>
        <member name="F:GestureLib.HorizontalTendenceDirection.Left">
            <summary>
            Line runs in the left direction
            </summary>
        </member>
        <member name="F:GestureLib.HorizontalTendenceDirection.Right">
            <summary>
            Line runs in the right direction
            </summary>
        </member>
        <member name="T:GestureLib.VerticalTendenceDirection">
            <summary>
            Defines a tendence of a line in the vertical direction
            </summary>
        </member>
        <member name="F:GestureLib.VerticalTendenceDirection.None">
            <summary>
            Line runs exactly straight left or right
            </summary>
        </member>
        <member name="F:GestureLib.VerticalTendenceDirection.Top">
            <summary>
            Line runs in the top direction
            </summary>
        </member>
        <member name="F:GestureLib.VerticalTendenceDirection.Bottom">
            <summary>
            Line runs in the bottom direction
            </summary>
        </member>
        <member name="T:GestureLib.PointTendence">
            <summary>
            Describes a tendence between two points
            </summary>
        </member>
        <member name="P:GestureLib.PointTendence.Horizontal">
            <summary>
            Gets the calculated horizontal tendence.
            </summary>
            <value>The horizontal.</value>
        </member>
        <member name="P:GestureLib.PointTendence.Vertical">
            <summary>
            Gets the calculated vertical tendence.
            </summary>
            <value>The vertical.</value>
        </member>
        <member name="P:GestureLib.PointTendence.From">
            <summary>
            Gets the start point.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:GestureLib.PointTendence.To">
            <summary>
            Gets the end point.
            </summary>
            <value>To.</value>
        </member>
        <member name="T:GestureLib.PointTendenceAnalyzer">
            <summary>
            Used for getting all corner marks and some additional information of a pointer gesture
            </summary>
        </member>
        <member name="P:GestureLib.PointTendenceAnalyzer.RecordedPointerGestureStates">
            <summary>
            Gets the recorded pointer gesture states.
            </summary>
            <value>The recorded pointer gesture states.</value>
        </member>
        <member name="P:GestureLib.PointTendenceAnalyzer.GestureBounds">
            <summary>
            Gets the bounds, whithin the gesture is drawn.
            </summary>
            <value>The gesture bounds.</value>
        </member>
        <member name="P:GestureLib.PointTendenceAnalyzer.CornerMarks">
            <summary>
            Gets the analyzed corner marks of the pointer gesture.
            </summary>
            <value>The corner marks.</value>
        </member>
        <member name="P:GestureLib.PointTendenceAnalyzer.PointTendenceGroups">
            <summary>
            Gets the grouped point tendences. The list is grouped by all points between two corner marks.
            </summary>
            <value>The point tendence groups.</value>
        </member>
        <member name="P:GestureLib.PointTendenceAnalyzer.MatchedGestureAlgorithms">
            <summary>
            Gets all the matched gesture algorithms.
            </summary>
            <value>The matched gesture algorithms.</value>
        </member>
        <member name="T:GestureLib.TrainedGestureCollection">
            <summary>
            Holds a list TrainedGestures
            </summary>
        </member>
        <member name="M:GestureLib.TrainedGestureCollection.GetTrainedGestureByMatchedAlgorithms(GestureLib.GestureAlgorithmCollection)">
            <summary>
            Gets the TrainedGesture, which matches best to given gesture algorithms.
            </summary>
            <param name="matchedAlgorithms">The gesture algorithms, which will be searched in the TrainedGesture items.</param>
            <returns></returns>
        </member>
        <member name="T:GestureLib.AbstractGestureDevice">
            <summary>
            Base class for a new gesture device (e.g. mouse or Wii Remote)
            </summary>
        </member>
        <member name="M:GestureLib.AbstractGestureDevice.OnGestureDeviceParametersChanged">
            <summary>
            Called when the gesture state changed.
            </summary>
        </member>
        <member name="M:GestureLib.AbstractGestureDevice.OnRecordingStart">
            <summary>
            Called when the recording process of the gesture started.
            </summary>
        </member>
        <member name="M:GestureLib.AbstractGestureDevice.OnRecordingFinish">
            <summary>
            Called when the recording process of the gesture is finished.
            </summary>
        </member>
        <member name="E:GestureLib.AbstractGestureDevice.GestureDeviceParametersChanged">
            <summary>
            Occurs when the gesture state changed.
            </summary>
        </member>
        <member name="E:GestureLib.AbstractGestureDevice.RecordingStart">
            <summary>
            Occurs when the recording process of the gesture started.
            </summary>
        </member>
        <member name="E:GestureLib.AbstractGestureDevice.RecordingFinish">
            <summary>
            Occurs when the recording process of the gesture is finished.
            </summary>
        </member>
        <member name="T:GestureLib.AccelerationGestureState">
            <summary>
            Describes one state of an acceleration gesture.
            </summary>
        </member>
        <member name="T:GestureLib.IGestureState">
            <summary>
            Defines a base interface for pointer and acceleration gesture states.
            </summary>
        </member>
        <member name="M:GestureLib.AccelerationGestureState.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GestureLib.AccelerationGestureState"/> class.
            </summary>
            <param name="x">The X-acceleration value.</param>
            <param name="y">The Y-acceleration value.</param>
            <param name="z">The Z-acceleration value.</param>
        </member>
        <member name="P:GestureLib.AccelerationGestureState.X">
            <summary>
            Gets the X-acceleration value.
            </summary>
            <value>The X-acceleration value.</value>
        </member>
        <member name="P:GestureLib.AccelerationGestureState.Y">
            <summary>
            Gets the Y-acceleration value.
            </summary>
            <value>The Y-acceleration value.</value>
        </member>
        <member name="P:GestureLib.AccelerationGestureState.Z">
            <summary>
            Gets the Z-acceleration value.
            </summary>
            <value>The Z-acceleration value.</value>
        </member>
        <member name="T:GestureLib.PointerGestureState">
            <summary>
            Describes one state of an pointer gesture.
            </summary>
        </member>
        <member name="M:GestureLib.PointerGestureState.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GestureLib.PointerGestureState"/> class.
            </summary>
            <param name="x">The X-pointer value.</param>
            <param name="y">The Y-pointer value.</param>
        </member>
        <member name="P:GestureLib.PointerGestureState.X">
            <summary>
            Gets the Y-pointer value.
            </summary>
            <value>The Y-pointer value.</value>
        </member>
        <member name="P:GestureLib.PointerGestureState.Y">
            <summary>
            Gets the Y-pointer value.
            </summary>
            <value>The Y-pointer value.</value>
        </member>
        <member name="T:GestureLib.IAccelerationGestureDevice">
            <summary>
            Defines the methods and properties, which a Acceleration-Device (e.g. Wii Remote) must implement.
            </summary>
        </member>
        <member name="P:GestureLib.IAccelerationGestureDevice.AccelerationGestureState">
            <summary>
            Gets the acceleration gesture state.
            </summary>
            <value>The acceleration gesture state.</value>
        </member>
        <member name="T:GestureLib.IPointerGestureDevice">
            <summary>
            Defines the methods and properties, which a Pointer-Device (e.g. mouse) must implement.
            </summary>
        </member>
        <member name="P:GestureLib.IPointerGestureDevice.PointerGestureState">
            <summary>
            Gets the pointer gesture state.
            </summary>
            <value>The pointer gesture state.</value>
        </member>
        <member name="T:GestureLib.GestureLib">
            <summary>
            Defines the entry point for the GestureLib library
            </summary>
        </member>
        <member name="M:GestureLib.GestureLib.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GestureLib.GestureLib"/> class.
            </summary>
        </member>
        <member name="M:GestureLib.GestureLib.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GestureLib.GestureLib.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GestureLib.GestureLib.GestureDevice">
            <summary>
            Gets or sets the gesture device, which is used for recording the gestures.
            </summary>
            <value>The gesture device.</value>
        </member>
        <member name="P:GestureLib.GestureLib.ConfigurationManager">
            <summary>
            Gets or sets the configuration manager, which is used for storing TrainedGestures collection.
            </summary>
            <value>The configuration manager.</value>
        </member>
        <member name="P:GestureLib.GestureLib.TrainedGestures">
            <summary>
            Holds the TrainedGestures.
            </summary>
            <value>The TrainedGestures.</value>
        </member>
        <member name="P:GestureLib.GestureLib.AvailableGestureActions">
            <summary>
            Holds the available gesture actions, which can be assigned in a TrainedGesture.
            </summary>
            <value>The available gesture actions.</value>
        </member>
        <member name="P:GestureLib.GestureLib.AvailableGestureAlgorithms">
            <summary>
            Holds the available gesture algorithms, which will analyze the recorded gesture states.
            </summary>
            <value>The available gesture algorithms.</value>
        </member>
        <member name="P:GestureLib.GestureLib.Recording">
            <summary>
            Gets a reference to the recorder and analyzer for the gesture states.
            </summary>
            <value>The recording.</value>
        </member>
        <member name="P:GestureLib.GestureLib.ImpersonatingMouse">
            <summary>
            Gets or sets a value indicating whether the mouse will be impersonated by the GestureDevice.
            </summary>
            <value><c>true</c> if the mouse is impersonated otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GestureLib.GestureLib.ScreenBounds">
            <summary>
            Gets or sets the screen bounds, which define the range where the impersonated mouse cursor will be projected.
            </summary>
            <value>The screen bounds.</value>
        </member>
        <member name="T:GestureLib.IGestureAction">
            <summary>
            Defines the methods and properties of an action command, which can be executed, when GestureAlgorithms match.
            </summary>
        </member>
        <member name="M:GestureLib.IGestureAction.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:GestureLib.Recording">
            <summary>
            Provides functionality for setting up everything, which corresponds to the gesture recording or analyzing process
            </summary>
        </member>
        <member name="M:GestureLib.Recording.StartRecording">
            <summary>
            Starts the recording process.
            </summary>
        </member>
        <member name="M:GestureLib.Recording.EndRecording">
            <summary>
            Ends the recording process.
            </summary>
        </member>
        <member name="M:GestureLib.Recording.OnRecordingStarted">
            <summary>
            Called when the recording process started.
            </summary>
        </member>
        <member name="M:GestureLib.Recording.OnRecordingFinished">
            <summary>
            Called when the recording process finished.
            </summary>
        </member>
        <member name="M:GestureLib.Recording.RecognizeRecording(GestureLib.GestureStateCollection{GestureLib.AccelerationGestureState})">
            <summary>
            Recognizes the recording of acceleration gesture states.
            </summary>
            <param name="recordedAccelerationGestureStates">The recorded acceleration gesture states, which should be analyzed.</param>
            <returns></returns>
        </member>
        <member name="M:GestureLib.Recording.RecognizeRecording(GestureLib.GestureStateCollection{GestureLib.PointerGestureState})">
            <summary>
            Recognizes the recording of pointer gesture states.
            </summary>
            <param name="recordedPointerGestureStates">The recorded pointer gesture states, which should be analyzed.</param>
            <returns></returns>
        </member>
        <member name="M:GestureLib.Recording.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GestureLib.Recording.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:GestureLib.Recording.RecordingFinished">
            <summary>
            Occurs when the recording process finished.
            </summary>
        </member>
        <member name="E:GestureLib.Recording.RecordingStarted">
            <summary>
            Occurs when the recording process started.
            </summary>
        </member>
        <member name="P:GestureLib.Recording.RecordingEnabled">
            <summary>
            Gets a value, which is indicating the recording process.
            </summary>
            <value><c>true</c> if the recording process is currently running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GestureLib.Recording.EventFilterNumber">
            <summary>
            Gets or sets the event filter number.
            </summary>
            <value>The number of events, which will be used for analyzing the recorded data.
            (e.g. if you enter 2, then only every second GestureState is used for analyzing, if you enter 3, only every third will is used, and so on...)
            </value>
        </member>
        <member name="P:GestureLib.Recording.RecordedAccelerationGestureStates">
            <summary>
            Gets the recorded acceleration gesture states.
            </summary>
            <value>The recorded acceleration gesture states.</value>
        </member>
        <member name="P:GestureLib.Recording.RecordedPointerGestureStates">
            <summary>
            Gets or sets the recorded pointer gesture states.
            </summary>
            <value>The recorded pointer gesture states.</value>
        </member>
        <member name="P:GestureLib.Recording.ShowOverlayWhenBeginRecording">
            <summary>
            Gets or sets a value indicating whether an overlay will be shown, which displays the current pointer location, when the recording process begins.
            </summary>
            <value>
            	<c>true</c> if, the overlay form should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:GestureLib.TrainedGesture">
            <summary>
            Describes an association between algorithms and actions.
            </summary>
        </member>
        <member name="M:GestureLib.TrainedGesture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GestureLib.TrainedGesture"/> class.
            </summary>
        </member>
        <member name="P:GestureLib.TrainedGesture.GestureActions">
            <summary>
            Collection of the GestureActions, which should be executed, when the GestureAlgorithms match.
            </summary>
            <value>The gesture actions.</value>
        </member>
        <member name="P:GestureLib.TrainedGesture.GestureAlgorithms">
            <summary>
            Collection of the GestureAlgorithms, wich can be checked, when a gesture was executed.
            </summary>
            <value>The gesture algorithms.</value>
        </member>
        <member name="P:GestureLib.TrainedGesture.LastExecutionAt">
            <summary>
            Gets or sets the date of the last gesture execution.
            </summary>
            <value>The last execution at.</value>
        </member>
        <member name="P:GestureLib.TrainedGesture.SavedAt">
            <summary>
            Gets or sets the date when this item was saved at.
            </summary>
            <value>The saved at.</value>
        </member>
        <member name="P:GestureLib.TrainedGesture.Name">
            <summary>
            Gets or sets the name of this item.
            So, the member can be identified in the collection of TrainedGestures.
            </summary>
            <value>The name.</value>
        </member>
    </members>
</doc>
